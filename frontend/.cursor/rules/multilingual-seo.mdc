---
description: Multilingual Support with SEO-Friendly URLs
globs: ["**/i18n/**/*.js", "**/locales/**/*.json", "**/components/LanguageSwitcher.jsx", "**/middleware.js"]
alwaysApply: true
---

# Multilingual Support with SEO-Friendly URLs

## Language Configuration
- Support Uzbek (main), Russian, and English languages
- Implement SEO-friendly URLs with language prefixes
- Use hreflang tags for search engines
- Example structure:
```javascript
// config/languages.js
export const LANGUAGES = {
  uz: {
    code: 'uz',
    name: 'O\'zbekcha',
    nativeName: 'O\'zbek tili',
    flag: '🇺🇿',
    direction: 'ltr',
    isRTL: false,
    locale: 'uz-UZ'
  },
  ru: {
    code: 'ru',
    name: 'Русский',
    nativeName: 'Русский язык',
    flag: '🇷🇺',
    direction: 'ltr',
    isRTL: false,
    locale: 'ru-RU'
  },
  en: {
    code: 'en',
    name: 'English',
    nativeName: 'English',
    flag: '🇺🇸',
    direction: 'ltr',
    isRTL: false,
    locale: 'en-US'
  }
};

export const DEFAULT_LANGUAGE = 'uz'; // Main language
export const SUPPORTED_LANGUAGES = ['uz', 'ru', 'en'];
export const LANGUAGE_NAMES = {
  uz: 'O\'zbekcha',
  ru: 'Русский',
  en: 'English'
};
```

## SEO-Friendly URL Structure
```javascript
// URL patterns for different languages
const URL_PATTERNS = {
  // Uzbek (main language) - no prefix
  uz: {
    home: '/',
    battles: '/janglar',
    battle: '/janglar/[id]',
    categories: '/kategoriyalar',
    category: '/kategoriyalar/[slug]',
    trending: '/trend',
    user: '/@[username]',
    create: '/yaratish'
  },
  // Russian - /ru prefix
  ru: {
    home: '/ru',
    battles: '/ru/bitvy',
    battle: '/ru/bitvy/[id]',
    categories: '/ru/kategorii',
    category: '/ru/kategorii/[slug]',
    trending: '/ru/trend',
    user: '/ru/@[username]',
    create: '/ru/sozdat'
  },
  // English - /en prefix
  en: {
    home: '/en',
    battles: '/en/battles',
    battle: '/en/battles/[id]',
    categories: '/en/categories',
    category: '/en/categories/[slug]',
    trending: '/en/trending',
    user: '/en/@[username]',
    create: '/en/create'
  }
};
```

## Next.js i18n Configuration
```javascript
// next.config.js
const { i18n } = require('./next-i18next.config');

module.exports = {
  i18n: {
    locales: ['uz', 'ru', 'en'],
    defaultLocale: 'uz',
    localeDetection: true,
    domains: [
      {
        domain: 'votefight.uz',
        defaultLocale: 'uz'
      },
      {
        domain: 'votefight.ru',
        defaultLocale: 'ru'
      },
      {
        domain: 'votefight.com',
        defaultLocale: 'en'
      }
    ]
  },
  async rewrites() {
    return [
      // Redirect root to Uzbek (main language)
      {
        source: '/',
        destination: '/uz',
        locale: false
      }
    ];
  }
};
```

## Language Switcher Component
```jsx
// components/LanguageSwitcher.jsx
import { useRouter } from 'next/router';
import { useTranslation } from 'next-i18next';
import { LANGUAGES } from '../config/languages';

const LanguageSwitcher = ({ className = '' }) => {
  const router = useRouter();
  const { t } = useTranslation('common');

  const handleLanguageChange = (locale) => {
    const { pathname, asPath, query } = router;
    
    // Preserve the current path but change language
    router.push({ pathname, query }, asPath, { locale });
  };

  return (
    <div className={`relative ${className}`}>
      <select
        value={router.locale}
        onChange={(e) => handleLanguageChange(e.target.value)}
        className="appearance-none bg-white border border-gray-300 rounded-lg px-3 py-2 pr-8 text-sm focus:outline-none focus:ring-2 focus:ring-red-500"
      >
        {Object.values(LANGUAGES).map((lang) => (
          <option key={lang.code} value={lang.code}>
            {lang.flag} {lang.name}
          </option>
        ))}
      </select>
    </div>
  );
};

export default LanguageSwitcher;
```

## Translation Files Structure
```json
// public/locales/uz/common.json
{
  "navigation": {
    "home": "Bosh sahifa",
    "battles": "Janglar",
    "trending": "Trend",
    "categories": "Kategoriyalar",
    "create": "Yaratish"
  },
  "battle": {
    "title": "Jang",
    "description": "Tavsif",
    "vote": "Ovoz berish",
    "results": "Natijalar",
    "totalVotes": "Jami ovozlar",
    "views": "Ko'rishlar",
    "trending": "Trend",
    "createdBy": "Yaratuvchi",
    "deadline": "Muddat",
    "noDeadline": "Muddat yo'q"
  },
  "buttons": {
    "vote": "Ovoz berish",
    "share": "Ulashish",
    "like": "Yoqtirish",
    "comment": "Izoh qoldirish",
    "create": "Jang yaratish",
    "addElement": "Element qo'shish"
  },
  "forms": {
    "battleTitle": "Qanday so'rovnoma yaratyapsiz?",
    "description": "Tavsif",
    "deadline": "Muddat",
    "category": "Kategoriya",
    "addElement": "Element qo'shish"
  }
}
```

```json
// public/locales/ru/common.json
{
  "navigation": {
    "home": "Главная",
    "battles": "Битвы",
    "trending": "Тренд",
    "categories": "Категории",
    "create": "Создать"
  },
  "battle": {
    "title": "Битва",
    "description": "Описание",
    "vote": "Голосование",
    "results": "Результаты",
    "totalVotes": "Всего голосов",
    "views": "Просмотры",
    "trending": "Тренд",
    "createdBy": "Создатель",
    "deadline": "Срок",
    "noDeadline": "Без срока"
  },
  "buttons": {
    "vote": "Голосовать",
    "share": "Поделиться",
    "like": "Нравится",
    "comment": "Комментировать",
    "create": "Создать битву",
    "addElement": "Добавить элемент"
  },
  "forms": {
    "battleTitle": "Какой опрос вы создаете?",
    "description": "Описание",
    "deadline": "Срок",
    "category": "Категория",
    "addElement": "Добавить элемент"
  }
}
```

```json
// public/locales/en/common.json
{
  "navigation": {
    "home": "Home",
    "battles": "Battles",
    "trending": "Trending",
    "categories": "Categories",
    "create": "Create"
  },
  "battle": {
    "title": "Battle",
    "description": "Description",
    "vote": "Vote",
    "results": "Results",
    "totalVotes": "Total Votes",
    "views": "Views",
    "trending": "Trending",
    "createdBy": "Created by",
    "deadline": "Deadline",
    "noDeadline": "No deadline"
  },
  "buttons": {
    "vote": "Vote",
    "share": "Share",
    "like": "Like",
    "comment": "Comment",
    "create": "Create Battle",
    "addElement": "Add Element"
  },
  "forms": {
    "battleTitle": "What poll are you creating?",
    "description": "Description",
    "deadline": "Deadline",
    "category": "Category",
    "addElement": "Add Element"
  }
}
```

## SEO Meta Tags with Hreflang
```jsx
// components/SEOHead.jsx
import Head from 'next/head';
import { useRouter } from 'next/router';
import { useTranslation } from 'next-i18next';

const SEOHead = ({ 
  title, 
  description, 
  image, 
  url, 
  type = 'website',
  battle = null 
}) => {
  const router = useRouter();
  const { t } = useTranslation('common');
  
  const currentLocale = router.locale;
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL;
  
  // Generate hreflang tags for all languages
  const generateHreflangTags = () => {
    const languages = ['uz', 'ru', 'en'];
    return languages.map(lang => {
      const localizedUrl = url.replace(`/${currentLocale}`, `/${lang}`);
      return (
        <link
          key={lang}
          rel="alternate"
          hrefLang={lang}
          href={`${baseUrl}${localizedUrl}`}
        />
      );
    });
  };

  // Generate localized title and description
  const localizedTitle = battle 
    ? `${battle.title} - VoteFight`
    : `${title} - VoteFight`;
    
  const localizedDescription = battle 
    ? battle.description 
    : description;

  return (
    <Head>
      {/* Basic Meta Tags */}
      <title>{localizedTitle}</title>
      <meta name="description" content={localizedDescription} />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      
      {/* Language and Locale */}
      <meta httpEquiv="content-language" content={currentLocale} />
      <meta name="language" content={currentLocale} />
      
      {/* Open Graph */}
      <meta property="og:title" content={localizedTitle} />
      <meta property="og:description" content={localizedDescription} />
      <meta property="og:image" content={image || `${baseUrl}/og-image.jpg`} />
      <meta property="og:url" content={`${baseUrl}${url}`} />
      <meta property="og:type" content={type} />
      <meta property="og:locale" content={currentLocale} />
      
      {/* Twitter Card */}
      <meta name="twitter:card" content="summary_large_image" />
      <meta name="twitter:title" content={localizedTitle} />
      <meta name="twitter:description" content={localizedDescription} />
      <meta name="twitter:image" content={image || `${baseUrl}/og-image.jpg`} />
      
      {/* Canonical URL */}
      <link rel="canonical" href={`${baseUrl}${url}`} />
      
      {/* Hreflang Tags */}
      {generateHreflangTags()}
      
      {/* Additional SEO */}
      <meta name="robots" content="index, follow" />
      <meta name="googlebot" content="index, follow" />
      
      {/* Structured Data */}
      {battle && (
        <script
          type="application/ld+json"
          dangerouslySetInnerHTML={{
            __html: JSON.stringify({
              "@context": "https://schema.org",
              "@type": "VoteAction",
              "name": battle.title,
              "description": battle.description,
              "url": `${baseUrl}${url}`,
              "inLanguage": currentLocale,
              "creator": {
                "@type": "Person",
                "name": battle.creator.username
              },
              "dateCreated": battle.created_at,
              "dateModified": battle.updated_at
            })
          }}
        />
      )}
    </Head>
  );
};

export default SEOHead;
```

## Multilingual Battle Component
```jsx
// components/MultilingualBattle.jsx
import { useTranslation } from 'next-i18next';
import SEOHead from './SEOHead';

const MultilingualBattle = ({ battle }) => {
  const { t } = useTranslation('common');
  const router = useRouter();
  
  return (
    <>
      <SEOHead
        title={battle.title}
        description={battle.description}
        image={battle.thumbnail_url}
        url={`/battles/${battle.id}`}
        type="article"
        battle={battle}
      />
      
      <div className="min-h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50">
        {/* Battle Header */}
        <div className="bg-white shadow-lg border-b-4 border-red-500">
          <div className="max-w-6xl mx-auto px-4 py-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-4">
                <div className="bg-red-100 p-3 rounded-full">
                  <TrophyIcon className="h-8 w-8 text-red-600" />
                </div>
                <div>
                  <h1 className="text-3xl font-bold text-gray-900">
                    {battle.title}
                  </h1>
                  <p className="text-gray-600 mt-1">
                    {battle.description}
                  </p>
                </div>
              </div>
              
              <div className="flex items-center space-x-6">
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-600">
                    {battle.total_votes}
                  </div>
                  <div className="text-sm text-gray-500">
                    {t('battle.totalVotes')}
                  </div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">
                    {battle.views}
                  </div>
                  <div className="text-sm text-gray-500">
                    {t('battle.views')}
                  </div>
                </div>
              </div>
            </div>

            {/* Battle Stats */}
            <div className="flex items-center justify-between text-sm text-gray-600">
              <div className="flex items-center space-x-6">
                <div className="flex items-center space-x-2">
                  <UsersIcon className="h-4 w-4" />
                  <span>
                    {t('battle.createdBy')} @{battle.creator.username}
                  </span>
                </div>
                <div className="flex items-center space-x-2">
                  <ClockIcon className="h-4 w-4" />
                  <span>
                    {battle.deadline 
                      ? `${t('battle.deadline')}: ${new Date(battle.deadline).toLocaleDateString()}`
                      : t('battle.noDeadline')
                    }
                  </span>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <button className="flex items-center space-x-2 px-4 py-2 bg-red-100 hover:bg-red-200 rounded-lg transition-colors">
                  <HeartIcon className="h-4 w-4" />
                  <span>{t('buttons.like')} ({battle.likes_count})</span>
                </button>
                <button className="flex items-center space-x-2 px-4 py-2 bg-blue-100 hover:bg-blue-200 rounded-lg transition-colors">
                  <ShareIcon className="h-4 w-4" />
                  <span>{t('buttons.share')}</span>
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Battle Arena */}
        <div className="max-w-6xl mx-auto px-4 py-8">
          <div className="text-center mb-8">
            <h2 className="text-2xl font-bold text-gray-900 mb-2">
              {t('battle.chooseChampion')}
            </h2>
            <p className="text-gray-600">
              {t('battle.clickToVote')}
            </p>
          </div>

          {/* Battle Elements */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {battle.elements.map((element, index) => (
              <div key={element.id} className="bg-white rounded-2xl shadow-lg border-4 border-red-300 hover:border-red-500 cursor-pointer transition-all duration-300 hover:scale-105">
                <div className="p-6">
                  <h3 className="text-xl font-bold text-gray-900 mb-4">
                    {element.name}
                  </h3>
                  
                  <button className="w-full py-4 px-6 rounded-lg font-bold text-lg bg-red-500 hover:bg-red-600 text-white hover:shadow-lg transition-all duration-200">
                    {t('buttons.vote')}
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </>
  );
};

export default MultilingualBattle;
```

## Language Detection Middleware
```javascript
// middleware.js
import { NextResponse } from 'next/server';

export function middleware(request) {
  const { pathname } = request.nextUrl;
  const pathnameHasLocale = ['/uz', '/ru', '/en'].some(
    (locale) => pathname.startsWith(`/${locale}/`) || pathname === `/${locale}`
  );

  // Redirect root to Uzbek (main language)
  if (pathname === '/') {
    return NextResponse.redirect(new URL('/uz', request.url));
  }

  // Handle @username routes
  if (pathname.startsWith('/@')) {
    const username = pathname.substring(2).split('/')[0];
    
    // Validate username format
    if (!/^[a-zA-Z0-9_]+$/.test(username)) {
      return NextResponse.redirect(new URL('/404', request.url));
    }
    
    return NextResponse.next();
  }

  // Handle language-specific routes
  if (!pathnameHasLocale) {
    // Default to Uzbek for unlocalized routes
    return NextResponse.redirect(new URL(`/uz${pathname}`, request.url));
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    '/((?!api|_next/static|_next/image|favicon.ico).*)',
  ],
};
```

## Django Backend i18n Support
```python
# settings/base.py
from django.utils.translation import gettext_lazy as _

LANGUAGE_CODE = 'uz'  # Default language
TIME_ZONE = 'Asia/Tashkent'

LANGUAGES = [
    ('uz', _('O\'zbekcha')),
    ('ru', _('Русский')),
    ('en', _('English')),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale'),
]

USE_I18N = True
USE_L10N = True
USE_TZ = True

# Language detection
MIDDLEWARE = [
    'django.middleware.locale.LocaleMiddleware',
    # ... other middleware
]

# API Response with language support
class BattleSerializer(serializers.ModelSerializer):
    title = serializers.CharField()
    description = serializers.CharField()
    
    def to_representation(self, instance):
        data = super().to_representation(instance)
        
        # Add language-specific fields
        request = self.context.get('request')
        if request:
            language = request.LANGUAGE_CODE
            data['language'] = language
            data['localized_url'] = f"/{language}/battles/{instance.id}"
        
        return data
```

## Sitemap Generation
```javascript
// pages/sitemap.xml.js
import { getServerSideProps } from 'next-sitemap';

export async function getServerSideProps({ res }) {
  const baseUrl = process.env.NEXT_PUBLIC_BASE_URL;
  const languages = ['uz', 'ru', 'en'];
  
  const sitemap = `<?xml version="1.0" encoding="UTF-8"?>
    <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"
            xmlns:xhtml="http://www.w3.org/1999/xhtml">
      ${languages.map(lang => `
        <url>
          <loc>${baseUrl}/${lang}</loc>
          <xhtml:link rel="alternate" hreflang="${lang}" href="${baseUrl}/${lang}"/>
          <xhtml:link rel="alternate" hreflang="x-default" href="${baseUrl}/uz"/>
        </url>
      `).join('')}
    </urlset>`;

  res.setHeader('Content-Type', 'text/xml');
  res.write(sitemap);
  res.end();

  return {
    props: {},
  };
}
```