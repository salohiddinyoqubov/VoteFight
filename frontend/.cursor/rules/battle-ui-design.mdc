---
description: Battle Detail Page UI Design with Competitive Spirit
globs: ["**/components/BattleDetail.jsx", "**/components/BattleCard.jsx", "**/pages/battles/[id].js"]
alwaysApply: true
---

# Battle Detail Page - Competitive Spirit UI

## Battle Detail Page Structure
- Create engaging, competitive UI that reflects the spirit of battle
- Use cached updates (5-minute intervals) instead of WebSockets
- Implement optimistic UI updates for immediate feedback
- Example structure:
```jsx
// components/BattleDetail.jsx
import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import { 
  FireIcon, 
  ClockIcon, 
  EyeIcon, 
  HeartIcon, 
  ShareIcon,
  ChatBubbleLeftIcon,
  TrophyIcon,
  UsersIcon
} from '@heroicons/react/24/outline';

const BattleDetail = ({ battle }) => {
  const [selectedElement, setSelectedElement] = useState(null);
  const [hasVoted, setHasVoted] = useState(battle.user_voted);
  const [voteCounts, setVoteCounts] = useState(battle.elements.map(el => el.vote_count));
  const [isVoting, setIsVoting] = useState(false);
  const [showResults, setShowResults] = useState(false);
  const [lastUpdated, setLastUpdated] = useState(new Date());

  const handleVote = async (elementId) => {
    // Implementation goes in actual file
    pass
        setVoteCounts(newCounts);
        setShowResults(true);
        setLastUpdated(new Date());
      }
    } catch (error) {
      console.error('Vote failed:', error);
    } finally {
      setIsVoting(false);
    }
  };

  const totalVotes = voteCounts.reduce((sum, count) => sum + count, 0);

  return (
    <>
      <Head>
        <title>{battle.title} - VoteFight</title>
        <meta name="description" content={battle.description} />
        <meta property="og:title" content={battle.title} />
        <meta property="og:description" content={battle.description} />
        <meta property="og:image" content={battle.thumbnail_url} />
        <meta property="og:url" content={`https://votefight.com/battles/${battle.id}`} />
        <link rel="canonical" href={`https://votefight.com/battles/${battle.id}`} />
      </Head>

      <div className="min-h-screen bg-gradient-to-br from-red-50 via-orange-50 to-yellow-50">
        {/* Battle Header */}
        <div className="bg-white shadow-lg border-b-4 border-red-500">
          <div className="max-w-6xl mx-auto px-4 py-6">
            <div className="flex items-center justify-between mb-4">
              <div className="flex items-center space-x-4">
                <div className="bg-red-100 p-3 rounded-full">
                  <TrophyIcon className="h-8 w-8 text-red-600" />
                </div>
                <div>
                  <h1 className="text-3xl font-bold text-gray-900">{battle.title}</h1>
                  <p className="text-gray-600 mt-1">{battle.description}</p>
                </div>
              </div>
              
              <div className="flex items-center space-x-6">
                <div className="text-center">
                  <div className="text-2xl font-bold text-red-600">{totalVotes}</div>
                  <div className="text-sm text-gray-500">Total Votes</div>
                </div>
                <div className="text-center">
                  <div className="text-2xl font-bold text-orange-600">{battle.views}</div>
                  <div className="text-sm text-gray-500">Views</div>
                </div>
              <div className="text-center">
                <div className="text-2xl font-bold text-yellow-600">{battle.trending_score}</div>
                <div className="text-sm text-gray-500">Trending</div>
              </div>
              <div className="text-center">
                <div className="text-sm text-gray-500">Last updated</div>
                <div className="text-xs text-gray-400">{lastUpdated.toLocaleTimeString()}</div>
              </div>
              </div>
            </div>

            {/* Battle Stats */}
            <div className="flex items-center justify-between text-sm text-gray-600">
              <div className="flex items-center space-x-6">
                <div className="flex items-center space-x-2">
                  <UsersIcon className="h-4 w-4" />
                  <span>Created by @{battle.creator.username}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <ClockIcon className="h-4 w-4" />
                  <span>{battle.deadline ? `Ends ${new Date(battle.deadline).toLocaleDateString()}` : 'No deadline'}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <FireIcon className="h-4 w-4 text-red-500" />
                  <span>#{battle.category}</span>
                </div>
              </div>
              
              <div className="flex items-center space-x-4">
                <button className="flex items-center space-x-2 px-4 py-2 bg-red-100 hover:bg-red-200 rounded-lg transition-colors">
                  <HeartIcon className="h-4 w-4" />
                  <span>{battle.likes_count}</span>
                </button>
                <button className="flex items-center space-x-2 px-4 py-2 bg-blue-100 hover:bg-blue-200 rounded-lg transition-colors">
                  <ShareIcon className="h-4 w-4" />
                  <span>Share</span>
                </button>
                <button className="flex items-center space-x-2 px-4 py-2 bg-green-100 hover:bg-green-200 rounded-lg transition-colors">
                  <ChatBubbleLeftIcon className="h-4 w-4" />
                  <span>{battle.comments_count}</span>
                </button>
              </div>
            </div>
          </div>
        </div>

        {/* Battle Arena */}
        <div className="max-w-6xl mx-auto px-4 py-8">
          {!hasVoted ? (
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-2">Choose Your Champion!</h2>
              <p className="text-gray-600">Click on your favorite to cast your vote</p>
            </div>
          ) : (
            <div className="text-center mb-8">
              <div className="inline-flex items-center space-x-2 bg-green-100 text-green-800 px-4 py-2 rounded-full">
                <TrophyIcon className="h-5 w-5" />
                <span className="font-semibold">You've voted!</span>
              </div>
            </div>
          )}

          {/* Battle Elements */}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8 mb-8">
            {battle.elements.map((element, index) => {
              const percentage = totalVotes > 0 ? (voteCounts[index] / totalVotes) * 100 : 0;
              const isSelected = selectedElement === element.id;
              const isWinning = showResults && percentage > 50;
              
              return (
                <div 
                  key={element.id}
                  className={`relative bg-white rounded-2xl shadow-lg border-4 transition-all duration-300 hover:scale-105 ${
                    hasVoted 
                      ? isWinning 
                        ? 'border-green-500 bg-green-50' 
                        : 'border-gray-300'
                      : 'border-red-300 hover:border-red-500 cursor-pointer'
                  } ${isSelected ? 'ring-4 ring-red-500' : ''}`}
                  onClick={() => !hasVoted && handleVote(element.id)}
                >
                  {/* Element Header */}
                  <div className="p-6">
                    <div className="flex items-center justify-between mb-4">
                      <h3 className="text-xl font-bold text-gray-900">{element.name}</h3>
                      {hasVoted && (
                        <div className="flex items-center space-x-2">
                          {isWinning && <TrophyIcon className="h-6 w-6 text-yellow-500" />}
                          <span className="text-2xl font-bold text-gray-900">{voteCounts[index]}</span>
                        </div>
                      )}
                    </div>

                    {/* Media Content */}
                    {element.media_url && (
                      <div className="mb-4">
                        {element.media_type === 'image' && (
                          <img 
                            src={element.media_url} 
                            alt={element.name}
                            className="w-full h-48 object-cover rounded-lg"
                          />
                        )}
                        {element.media_type === 'video' && (
                          <video 
                            src={element.media_url}
                            className="w-full h-48 object-cover rounded-lg"
                            controls
                          />
                        )}
                        {element.media_type === 'audio' && (
                          <div className="bg-gray-100 p-4 rounded-lg">
                            <audio src={element.media_url} controls className="w-full" />
                          </div>
                        )}
                      </div>
                    )}

                    {/* Vote Button */}
                    {!hasVoted && (
                      <button 
                        className={`w-full py-4 px-6 rounded-lg font-bold text-lg transition-all duration-200 ${
                          isVoting 
                            ? 'bg-gray-400 cursor-not-allowed' 
                            : 'bg-red-500 hover:bg-red-600 text-white hover:shadow-lg'
                        }`}
                        disabled={isVoting}
                      >
                        {isVoting ? 'Voting...' : 'Vote for this!'}
                      </button>
                    )}

                    {/* Results Bar */}
                    {hasVoted && (
                      <div className="mt-4">
                        <div className="flex justify-between text-sm text-gray-600 mb-2">
                          <span>Votes: {voteCounts[index]}</span>
                          <span>{percentage.toFixed(1)}%</span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-3">
                          <div 
                            className={`h-3 rounded-full transition-all duration-1000 ${
                              isWinning ? 'bg-green-500' : 'bg-red-500'
                            }`}
                            style={{ width: `${percentage}%` }}
                          />
                        </div>
                      </div>
                    )}
                  </div>

                  {/* Winning Badge */}
                  {hasVoted && isWinning && (
                    <div className="absolute -top-4 -right-4 bg-yellow-500 text-white px-3 py-1 rounded-full font-bold text-sm">
                      WINNER!
                    </div>
                  )}
                </div>
              );
            })}
          </div>

          {/* Battle Progress */}
          {hasVoted && (
            <div className="bg-white rounded-2xl shadow-lg p-6 mb-8">
              <h3 className="text-xl font-bold text-gray-900 mb-4">Battle Progress</h3>
              <div className="space-y-4">
                {battle.elements.map((element, index) => {
                  const percentage = totalVotes > 0 ? (voteCounts[index] / totalVotes) * 100 : 0;
                  return (
                    <div key={element.id} className="flex items-center space-x-4">
                      <div className="w-24 text-sm font-medium text-gray-700">{element.name}</div>
                      <div className="flex-1 bg-gray-200 rounded-full h-4">
                        <div 
                          className="bg-red-500 h-4 rounded-full transition-all duration-1000"
                          style={{ width: `${percentage}%` }}
                        />
                      </div>
                      <div className="w-16 text-sm text-gray-600 text-right">
                        {percentage.toFixed(1)}%
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
          )}

          {/* Social Engagement */}
          <div className="bg-white rounded-2xl shadow-lg p-6">
            <h3 className="text-xl font-bold text-gray-900 mb-4">Join the Discussion</h3>
            <div className="flex items-center space-x-4">
              <button className="flex items-center space-x-2 px-4 py-2 bg-red-100 hover:bg-red-200 rounded-lg transition-colors">
                <HeartIcon className="h-5 w-5" />
                <span>Like ({battle.likes_count})</span>
              </button>
              <button className="flex items-center space-x-2 px-4 py-2 bg-blue-100 hover:bg-blue-200 rounded-lg transition-colors">
                <ShareIcon className="h-5 w-5" />
                <span>Share</span>
              </button>
              <button className="flex items-center space-x-2 px-4 py-2 bg-green-100 hover:bg-green-200 rounded-lg transition-colors">
                <ChatBubbleLeftIcon className="h-5 w-5" />
                <span>Comment ({battle.comments_count})</span>
              </button>
            </div>
          </div>
        </div>
      </div>
    </>
  );
};

export default BattleDetail;
```

## Battle Card Component
```jsx
// components/BattleCard.jsx
const BattleCard = ({ battle, showStats = true }) => {
  const router = useRouter();
  
  return (
    <div 
      className="bg-white rounded-2xl shadow-lg border-2 border-red-200 hover:border-red-400 transition-all duration-300 hover:shadow-xl cursor-pointer group"
      onClick={() => router.push(`/battles/${battle.id}`)}
    >
      {/* Battle Header */}
      <div className="p-6 border-b border-gray-100">
        <div className="flex items-center justify-between mb-3">
          <div className="flex items-center space-x-3">
            <div className="bg-red-100 p-2 rounded-full">
              <TrophyIcon className="h-5 w-5 text-red-600" />
            </div>
            <div>
              <h3 className="font-bold text-gray-900 group-hover:text-red-600 transition-colors">
                {battle.title}
              </h3>
              <p className="text-sm text-gray-500">by @{battle.creator.username}</p>
            </div>
          </div>
          
          <div className="flex items-center space-x-2 text-sm text-gray-500">
            <FireIcon className="h-4 w-4" />
            <span>#{battle.category}</span>
          </div>
        </div>
        
        {battle.description && (
          <p className="text-gray-600 text-sm mb-3">{battle.description}</p>
        )}
      </div>

      {/* Battle Elements Preview */}
      <div className="p-6">
        <div className="grid grid-cols-2 gap-4 mb-4">
          {battle.elements.slice(0, 2).map((element, index) => (
            <div key={element.id} className="text-center">
              <div className="bg-gray-100 rounded-lg p-3 mb-2">
                <span className="font-semibold text-gray-900">{element.name}</span>
              </div>
              {element.media_url && element.media_type === 'image' && (
                <img 
                  src={element.media_url} 
                  alt={element.name}
                  className="w-full h-20 object-cover rounded-lg"
                />
              )}
            </div>
          ))}
        </div>
        
        {battle.elements.length > 2 && (
          <div className="text-center text-sm text-gray-500 mb-4">
            +{battle.elements.length - 2} more options
          </div>
        )}
      </div>

      {/* Battle Stats */}
      {showStats && (
        <div className="px-6 py-4 bg-gray-50 rounded-b-2xl">
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center space-x-4">
              <div className="flex items-center space-x-1">
                <UsersIcon className="h-4 w-4 text-gray-500" />
                <span className="text-gray-600">{battle.total_votes} votes</span>
              </div>
              <div className="flex items-center space-x-1">
                <EyeIcon className="h-4 w-4 text-gray-500" />
                <span className="text-gray-600">{battle.views} views</span>
              </div>
            </div>
            
            <div className="flex items-center space-x-2">
              <ClockIcon className="h-4 w-4 text-gray-500" />
              <span className="text-gray-600">
                {battle.deadline 
                  ? `Ends ${new Date(battle.deadline).toLocaleDateString()}`
                  : 'No deadline'
                }
              </span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};
```

## Cached Battle Updates (5-minute intervals)
```jsx
// hooks/useBattleUpdates.js
import { useEffect, useState, useCallback } from 'react';

export const useBattleUpdates = (battleId) => {
  const [battle, setBattle] = useState(null);
  const [voteCounts, setVoteCounts] = useState([]);
  const [lastUpdated, setLastUpdated] = useState(null);
  const [isLoading, setIsLoading] = useState(false);

  const fetchBattleData = useCallback(async () => {
    if (!battleId) return;
    
    setIsLoading(true);
    try {
      const response = await fetch(`/api/battles/${battleId}/`);
      const data = await response.json();
      
      setBattle(data);
      setVoteCounts(data.elements.map(el => el.vote_count));
      setLastUpdated(new Date());
    } catch (error) {
      console.error('Failed to fetch battle data:', error);
    } finally {
      setIsLoading(false);
    }
  }, [battleId]);

  useEffect(() => {
    // Initial fetch
    fetchBattleData();
    
    // Set up 5-minute interval updates
    const interval = setInterval(fetchBattleData, 5 * 60 * 1000); // 5 minutes
    
    return () => clearInterval(interval);
  }, [fetchBattleData]);

  return { 
    battle, 
    voteCounts, 
    lastUpdated, 
    isLoading,
    refreshData: fetchBattleData 
  };
};
```

## Battle Statistics Component
```jsx
// components/BattleStats.jsx
const BattleStats = ({ battle, voteCounts }) => {
  const totalVotes = voteCounts.reduce((sum, count) => sum + count, 0);
  
  return (
    <div className="bg-white rounded-2xl shadow-lg p-6">
      <h3 className="text-xl font-bold text-gray-900 mb-4">Battle Statistics</h3>
      
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
        <div className="text-center">
          <div className="text-2xl font-bold text-red-600">{totalVotes}</div>
          <div className="text-sm text-gray-500">Total Votes</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-blue-600">{battle.views}</div>
          <div className="text-sm text-gray-500">Views</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-green-600">{battle.likes_count}</div>
          <div className="text-sm text-gray-500">Likes</div>
        </div>
        <div className="text-center">
          <div className="text-2xl font-bold text-yellow-600">{battle.trending_score}</div>
          <div className="text-sm text-gray-500">Trending Score</div>
        </div>
      </div>

      {/* Vote Distribution */}
      <div className="space-y-3">
        <h4 className="font-semibold text-gray-900">Vote Distribution</h4>
        {battle.elements.map((element, index) => {
          const percentage = totalVotes > 0 ? (voteCounts[index] / totalVotes) * 100 : 0;
          return (
            <div key={element.id} className="flex items-center space-x-3">
              <div className="w-20 text-sm font-medium text-gray-700">{element.name}</div>
              <div className="flex-1 bg-gray-200 rounded-full h-3">
                <div 
                  className="bg-red-500 h-3 rounded-full transition-all duration-1000"
                  style={{ width: `${percentage}%` }}
                />
              </div>
              <div className="w-12 text-sm text-gray-600 text-right">
                {percentage.toFixed(1)}%
              </div>
            </div>
          );
        })}
      </div>
    </div>
  );
};
```